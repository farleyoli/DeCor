plugins {
    id 'java'
    id 'application'
}

group 'org.example'
version '0.5'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.formdev/flatlaf
    implementation 'com.formdev:flatlaf:2.5'
    // https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
    implementation 'org.apache.pdfbox:pdfbox:2.0.27'
    // https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox-tools
    implementation 'org.apache.pdfbox:pdfbox-tools:2.0.27'
    implementation 'org.apache.commons:commons-text:1.10.0'
    // https://mvnrepository.com/artifact/org.apache.pdfbox/jbig2-imageio
    implementation group: 'org.apache.pdfbox', name: 'jbig2-imageio', version: '3.0.4'
    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20220924'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

ext {
    javaMainClass = "fso.decor.Main"
}

application {
    mainClassName = javaMainClass
}

apply plugin: 'java'

jar {
    manifest {
        attributes "Main-Class": "fso.decor.Main"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'fso.decor.Main'
    }
    archiveBaseName = 'DeCor'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task downloadSources {
    doLast {
        configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (artifact.type == 'jar') {
                def componentId = artifact.moduleVersion.id
                def result = dependencies.createArtifactResolutionQuery()
                    .forModule(componentId.group, componentId.name, componentId.version)
                    .withArtifacts(MavenModule, MavenArtifact)
                    .execute()

                result.resolvedComponents.each { component ->
                    component.getArtifacts(MavenArtifact).each { artifactResult ->
                        if (artifactResult.type == 'source' && artifactResult.file.exists()) {
                            copy {
                                from artifactResult.file
                                into "${buildDir}/libs/sources"
                            }
                        }
                    }
                }
            }
        }
    }
}

